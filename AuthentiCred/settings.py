"""
Django settings for AuthentiCred project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file first
env_path = BASE_DIR / '.env'
if env_path.exists():
    load_dotenv(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1', 
    '.railway.app', 
    '.up.railway.app',
    '.herokuapp.com',
    'authenticred-8a4c46d20c03.herokuapp.com',
    'authenticred.herokuapp.com',
    '*'
]

# Application definition

INSTALLED_APPS = [
    'tailwind',
    'theme',
    'blockchain',
    'users',
    'credentials',
    'wallets',
    'django_celery_results',
    'django_celery_beat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'encrypted_model_fields',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'wallets.middleware.WalletCheckMiddleware',
]

ROOT_URLCONF = 'AuthentiCred.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AuthentiCred.wsgi.application'

# Database configuration
import dj_database_url

# Check for DATABASE_URL first (user-created variable)
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Use the DATABASE_URL variable you created
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
elif os.environ.get('RAILWAY_ENVIRONMENT'):
    # Fallback to Railway's individual PostgreSQL environment variables
    PGHOST = os.environ.get('PGHOST')
    PGUSER = os.environ.get('PGUSER')
    PGPASSWORD = os.environ.get('PGPASSWORD')
    PGDATABASE = os.environ.get('PGDATABASE')
    PGPORT = os.environ.get('PGPORT')

    if PGHOST and PGUSER and PGPASSWORD:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': PGDATABASE or 'railway',
                'USER': PGUSER,
                'PASSWORD': PGPASSWORD,
                'HOST': PGHOST,
                'PORT': PGPORT or '5432',
                'OPTIONS': {
                    'sslmode': 'require',  # SSL required for Railway production
                },
            }
        }
    else:
        # We're on Railway but no database variables - this means database service isn't connected
        raise Exception(
            "Database variables not found. Please connect your PostgreSQL service to this app in Railway dashboard."
        )
else:
    # Local development with PostgreSQL (when no DATABASE_URL is set)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'authenticred_dev',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Only add STATICFILES_DIRS if the directory exists (for local development)
if os.path.exists(BASE_DIR / 'static'):
    STATICFILES_DIRS = [
        BASE_DIR / 'static',
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Generate key if doesn't exist
# python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key())"
FIELD_ENCRYPTION_KEY = b'4p_Wu4EIAb0GpcHMZYmHfUXZ-EIUve1IBPYKUNH_i8w='

# custom user model
# This setting tells Django to use the custom User model defined in the users app
AUTH_USER_MODEL = 'users.User'
# authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Login settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Blockchain app network configuration

# This section configures the blockchain network and RPC URLs for interactions

# Blockchain Configuration
BLOCKCHAIN_NETWORK = os.environ.get('BLOCKCHAIN_NETWORK', 'ganache')
BLOCKCHAIN_RPC_URL = os.environ.get('BLOCKCHAIN_RPC_URL', 'http://127.0.0.1:7545')
GANACHE_CHAIN_ID = int(os.environ.get('GANACHE_CHAIN_ID', '5777'))

# Contract addresses (from environment or defaults)
DIDREGISTRY_ADDRESS = os.environ.get('DIDREGISTRY_ADDRESS', '')
TRUSTREGISTRY_ADDRESS = os.environ.get('TRUSTREGISTRY_ADDRESS', '')
CREDENTIALANCHOR_ADDRESS = os.environ.get('CREDENTIALANCHOR_ADDRESS', '')
REVOCATIONREGISTRY_ADDRESS = os.environ.get('REVOCATIONREGISTRY_ADDRESS', '')

# Blockchain operator account (from environment or defaults)
BLOCKCHAIN_OPERATOR_KEY = os.environ.get('BLOCKCHAIN_OPERATOR_KEY', '')
BLOCKCHAIN_OPERATOR_ADDRESS = os.environ.get('BLOCKCHAIN_OPERATOR_ADDRESS', '')

# Celery configuration
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Tailwind CSS Configuration
TAILWIND_APP_NAME = 'theme'
NPM_BIN_PATH = "npm"

# Production settings
if os.environ.get('HEROKU') or os.environ.get('DYNO'):
    # Add WhiteNoise middleware for static files in production
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    
    # Security settings for production
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # HTTPS settings for production
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Field encryption key from environment
    FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY', b'4p_Wu4EIAb0GpcHMZYmHfUXZ-EIUve1IBPYKUNH_i8w=')
    
    print(f"üöÄ Heroku production settings loaded - DEBUG: {DEBUG}")
    print(f"üìä Database: {DATABASES['default']['ENGINE']}")
    print(f"üåê Allowed Hosts: {ALLOWED_HOSTS}")
