"""
Django settings for AuthentiCred project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)iivz2w4g9f)mxn2^#!e5^1-!clif%i63ww66^!-c+-8wxyxo&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'blockchain',
    'users',
    'credentials',
    'wallets',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'encrypted_model_fields', # For encrypted fields
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AuthentiCred.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AuthentiCred.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Generate key if doesn't exist
# python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key())"
FIELD_ENCRYPTION_KEY = b'4p_Wu4EIAb0GpcHMZYmHfUXZ-EIUve1IBPYKUNH_i8w='

# custom user model
# This setting tells Django to use the custom User model defined in the users app
AUTH_USER_MODEL = 'users.User'
# authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Login settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Blockchain app network configuration

# This section configures the blockchain network and RPC URLs for interactions
# Blockchain Configuration
BLOCKCHAIN_NETWORK = 'ganache'
BLOCKCHAIN_RPC_URL = 'http://127.0.0.1:8545'
GANACHE_CHAIN_ID = 1337

# Contract addresses
DIDREGISTRY_ADDRESS = '0x628ebf486EE1011773Cb847E3146B1Dc5a055636'
TRUSTREGISTRY_ADDRESS = '0x6e9b0C461B4E31f38A031De757FcAf61A54Fd12d'
CREDENTIALANCHOR_ADDRESS = '0x9719F6ea1a194084481801CBFDfa39D1E682395e'
REVOCATIONREGISTRY_ADDRESS = '0x048a4921fA707239668D516eF80Aa55BC956e652'

# account from Ganache as operator
BLOCKCHAIN_OPERATOR_KEY = '0x9fd786d565c995ec559a421e4a98fcf96f45b219bdb5cd8c236ace4019b39d9e'  # Ganache default private key
BLOCKCHAIN_OPERATOR_ADDRESS = '0xFf875aE13AbaD884BDD67bAC925549bE88C397a9'  # Ganache default address

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_BEAT_SCHEDULE = {
    'monitor_blockchain_transactions': {
        'task': 'blockchain.tasks.monitor_transactions',
        'schedule': 10.0,  # Every 10 seconds
    },
}
