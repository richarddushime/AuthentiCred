name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AM

jobs:
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run dependency vulnerability scan
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          pip-audit-report.json
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Security Scan Results\n\n';
          
          try {
            if (fs.existsSync('safety-report.json')) {
              const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyData.length > 0) {
                comment += '⚠️ **Safety Issues Found:**\n';
                safetyData.forEach(issue => {
                  comment += `- ${issue.package}: ${issue.advisory}\n`;
                });
              } else {
                comment += '✅ **No Safety Issues Found**\n';
              }
            }
          } catch (e) {
            comment += '❌ **Safety scan failed**\n';
          }
          
          comment += '\n---\n\n';
          
          try {
            if (fs.existsSync('bandit-report.json')) {
              const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              if (banditData.results && banditData.results.length > 0) {
                comment += '⚠️ **Bandit Issues Found:**\n';
                banditData.results.forEach(issue => {
                  comment += `- ${issue.filename}:${issue.line_number} - ${issue.issue_text}\n`;
                });
              } else {
                comment += '✅ **No Bandit Issues Found**\n';
              }
            }
          } catch (e) {
            comment += '❌ **Bandit scan failed**\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
